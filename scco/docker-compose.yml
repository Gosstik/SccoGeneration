version: "3.8"

# Entry points are set inside dockerfiles of each service.

services:
  data_preprocessing:
    profiles:
      - all
    build:
      context: "${DATA_PREPROCESSING_FOLDER}"
      dockerfile: Dockerfile
    image: "${COMPOSE_PROJECT_NAME}_${DATA_PREPROCESSING_FOLDER}"
    container_name: "${COMPOSE_PROJECT_NAME}_${DATA_PREPROCESSING_FOLDER}"
    env_file:
      - .env
#      - .secrets.env
#      - "${DATA_PREPROCESSING_FOLDER}/.env"
    volumes:
      - "${OUTSIDE_CSV_VOLUME}:${OUTSIDE_CSV_VOLUME_DOCKER_FOLDER}" # csv file
    restart: on-failure
    networks:
      int_network:
        aliases:
          - "${DATA_PREPROCESSING_NET_ALIAS}"
      rmq_network:

  ml_generation:
    profiles:
      - all
    build:
      context: "${ML_GENERATION_FOLDER}"
      dockerfile: Dockerfile
    image: "${COMPOSE_PROJECT_NAME}_${ML_GENERATION_FOLDER}"
    container_name: "${COMPOSE_PROJECT_NAME}_${ML_GENERATION_FOLDER}"
    env_file:
      - .env
    #      - .secrets.env
    #      - "${ML_GENERATION_FOLDER}/.env"
    restart: on-failure
    networks:
      int_network:
        aliases:
          - "${ML_GENERATION_NET_ALIAS}"
      rmq_network:

  pdf_generation:
    profiles:
      - all
    build:
      context: "${PDF_GENERATION_FOLDER}"
      dockerfile: Dockerfile
    image: "${COMPOSE_PROJECT_NAME}_${PDF_GENERATION_FOLDER}"
    container_name: "${COMPOSE_PROJECT_NAME}_${PDF_GENERATION_FOLDER}"
    env_file:
      - .env
    #      - .secrets.env
    #      - "${PDF_GENERATION_FOLDER}/.env"
    restart: on-failure
    networks:
      int_network:
        aliases:
          - "${PDF_GENERATION_NET_ALIAS}"
      rmq_network:

  db_crud_execution:
    profiles:
      - all
      - crud
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: "${DB_CRUD_EXECUTION_FOLDER}"
      dockerfile: Dockerfile
    image: "${COMPOSE_PROJECT_NAME}_${DB_CRUD_EXECUTION_FOLDER}"
    container_name: "${COMPOSE_PROJECT_NAME}_${DB_CRUD_EXECUTION_FOLDER}"
    env_file:
      - .env
      - "${DB_CRUD_EXECUTION_FOLDER}/.env.secret.postgres"
#    restart: "no"
    restart: on-failure
    networks:
      int_network:
        aliases:
          - "${DB_CRUD_EXECUTION_NET_ALIAS}"
      rmq_network:
      postgres:

  postgres:
    profiles:
      - all
      - crud
      - postgres
    container_name: "${COMPOSE_PROJECT_NAME}_postgres_container"
    image: postgres
    environment:
#      POSTGRES_USER_FILE: /run/secrets/pg_user
#      POSTGRES_PASSWORD_FILE: /run/secrets/pg_password
#      POSTGRES_USER: ${POSTGRES_USER:-postgres}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
#      POSTGRES_USER: ${POSTGRES_USER:-root}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}

#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    env_file:
      - "${DB_CRUD_EXECUTION_FOLDER}/.env.secret.postgres"
    volumes:
      - postgres:/data/postgres
#    ports:
#      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

#  pgadmin:
#    profiles:
#      - all
#      - postgres
#    container_name: "${COMPOSE_PROJECT_NAME}_pgadmin_container"
#    image: dpage/pgadmin4
#    environment:
#      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
#      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
#      PGADMIN_CONFIG_SERVER_MODE: 'False'
#    volumes:
#      - pgadmin:/var/lib/pgadmin
#    ports:
#      - "${PGADMIN_PORT:-5050}:80"
#    networks:
#      - postgres
#    restart: unless-stopped


networks:
  rmq_network:
    name: "${RMQ_NET}"
    external: true
  int_network:
    name: "${INT_NET}"
  postgres:
    name: "${POSTGRES_NETWORK_NAME}"
    driver: bridge


#  To reuse volumes across multiple services
volumes:
  postgres:
    name: "${POSTGRES_VOLUME_NAME}"
#  pgadmin:
#    name: "${PGADMIN_VOLUME_NAME}"

#secrets:
#  pg_user:
#    file: "./${DB_CRUD_EXECUTION_FOLDER}/secrets/pg_user"
#  pg_password:
#    file: "./${DB_CRUD_EXECUTION_FOLDER}/secrets/pg_password"
#  my_other_secret:
#    external: true

################################################################
