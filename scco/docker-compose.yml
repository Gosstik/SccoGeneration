version: "3.8"

# Entry points are set inside dockerfiles of each service.

services:
  data_preprocessing:
    profiles:
      - all
      - data_preprocessing
    build:
      context: "${DATA_PREPROCESSING_FOLDER}"
      dockerfile: Dockerfile
    image: "${COMPOSE_PROJECT_NAME}_${DATA_PREPROCESSING_FOLDER}"
    container_name: "${COMPOSE_PROJECT_NAME}_${DATA_PREPROCESSING_FOLDER}"
    env_file:
      - .env
#      - .secrets.env
#      - "${DATA_PREPROCESSING_FOLDER}/.env"
    volumes:
      - "${OUTSIDE_CSV_VOLUME}:${OUTSIDE_CSV_VOLUME_DOCKER_FOLDER}" # csv file
    restart: on-failure
    networks:
      int_network:
        aliases:
          - "${DATA_PREPROCESSING_NET_ALIAS}"

  ml_generation:
    profiles:
      - all
      - ml_generation
    build:
      context: "${ML_GENERATION_FOLDER}"
      dockerfile: Dockerfile
    image: "${COMPOSE_PROJECT_NAME}_${ML_GENERATION_FOLDER}"
    container_name: "${COMPOSE_PROJECT_NAME}_${ML_GENERATION_FOLDER}"
    env_file:
      - .env
    #      - .secrets.env
    #      - "${ML_GENERATION_FOLDER}/.env"
    restart: on-failure
    networks:
      int_network:
        aliases:
          - "${ML_GENERATION_NET_ALIAS}"

  pdf_generation:
    profiles:
      - all
      - pdf_generation
    build:
      context: "${PDF_GENERATION_FOLDER}"
      dockerfile: Dockerfile
    image: "${COMPOSE_PROJECT_NAME}_${PDF_GENERATION_FOLDER}"
    container_name: "${COMPOSE_PROJECT_NAME}_${PDF_GENERATION_FOLDER}"
    env_file:
      - .env
    #      - .secrets.env
    #      - "${PDF_GENERATION_FOLDER}/.env"
    restart: on-failure
    networks:
      int_network:
        aliases:
          - "${PDF_NET_ALIAS}"

  db_crud_execution:
    profiles:
      - all
      - db_crud_execution
    build:
      context: "${DB_CRUD_EXECUTION_FOLDER}"
      dockerfile: Dockerfile
    image: "${COMPOSE_PROJECT_NAME}_${DB_CRUD_EXECUTION_FOLDER}"
    container_name: "${COMPOSE_PROJECT_NAME}_${DB_CRUD_EXECUTION_FOLDER}"
    env_file:
      - .env
    #      - .secrets.env
    #      - "${DB_CRUD_EXECUTION_FOLDER}/.env"
    restart: on-failure
    networks:
      int_network:
        aliases:
          - "${DB_CRUD_EXECUTION_NET_ALIAS}"

  postgres:
    profiles:
      - all
    container_name: "${COMPOSE_PROJECT_NAME}_postgres_container"
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    profiles:
      - all
    container_name: "${COMPOSE_PROJECT_NAME}_pgadmin_container"
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - postgres
    restart: unless-stopped


networks:
  rmq_network:
    name: "${RMQ_NETWORK}"
    external: true
  int_network:
    name: "${INT_NETWORK}"
  postgres:
    driver: bridge

#  To reuse volumes across multiple services
volumes:
  postgres:
  pgadmin:

#secrets:
#  my_secret:
#    file: secrets.env
#  my_other_secret:
#    external: true


################################################################

