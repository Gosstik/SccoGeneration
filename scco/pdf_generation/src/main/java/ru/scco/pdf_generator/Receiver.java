package ru.scco.pdf_generator;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.stereotype.Service;
import ru.scco.pdf_generator.dto.DBInsertAllResponseDTO;
import ru.scco.pdf_generator.dto.DBInsertOneResponseDTO;
import ru.scco.pdf_generator.dto.PDFGeneratorRequestDTO;
import ru.scco.pdf_generator.processors.ProcessingChain;

import java.util.concurrent.ExecutorService;

// This class is entrypoint for rabbit's request:
// It reads from queues, calls necessary handlers and Sender's methods
@Slf4j
@Service
@RequiredArgsConstructor
public class Receiver {
    private final PDFGenerator pdfGenerator;
    private final Sender sender;
    private final ErrorsResponseMessages errorsMessages;
    private final ExecutorService generatorPool;
    private final ProcessingChain processingChain;

    // Get information by which will generate pdf
    @RabbitListener(queues = {"${rabbit.pdf_generation_queue}"})
    public void consume(PDFGeneratorRequestDTO request) {
        log.info("got request" + request);
        generatorPool.execute(() -> {
            String cp;
            // Removing bad parts of generated by ML text
            // and checking whether it is possible to generate
            // cp by rest of the text
            try {
                log.info("start postprocess");
                cp = processingChain.process(request.mainText());
            } catch (InvalidCPException invalidCPException) {
                log.info("invalid cp" + invalidCPException.getMessage());
                sender.sendError(request.messageId(),
                                 invalidCPException.getMessage());
                return;
            }
            log.info("start generating");
            String fileLink = pdfGenerator.generate(request.messageId(),
                                                    cp, request.contactInfo());
            log.info("end generating");
            if (fileLink == null) {
                sender.sendError(request.messageId(),
                                 errorsMessages.fileError());
                return;
            }
            sender.sendCPToDB(request.messageId(), fileLink);
        });
    }

    // Get information by which will send message with CP
    // Information: customer_id, client_id, path to cp
    @RabbitListener(queues = {"${rabbit.db_response_queue}"})
    public void consumeDBResponse(DBInsertAllResponseDTO responses) {
        log.info("got response:" + responses);
        for (DBInsertOneResponseDTO response : responses.getResponses()) {
            sender.sendCPToOutput(response.getCustomerID(),
                                  response.getClientID(),
                                  response.getFilePath());
        }
    }

}